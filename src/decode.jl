using FileIO
import DSP
using Statistics

NOAA_SYNCA = [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
NOAA_SYNCB = [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0]


function probe(start,imageA,imageB,y_demod)
    NOAA_SYNCA = [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    NOAA_SYNCB = [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0]
    i = start

    conv = 0.

    while (i < start + imageA + imageB + length(NOAA_SYNCA) + length(NOAA_SYNCB))
        conv += y_demod[i:i+length(NOAA_SYNCA)-1]' * NOAA_SYNCA
        i += imageA
        conv += y_demod[i:i+length(NOAA_SYNCB)-1]' * NOAA_SYNCB
        i += imageB
    end
    return conv
end


am_demodulation(y2) = abs.(DSP.Util.hilbert(y2))

wavname = "/home/abarth/src/APTDecoder/test.wav"
wavname = "/mnt/data1/abarth/Backup/abarth/testapt/gqrx_20180715_150114_137100000.wav"
wavname = "/home/abarth/testapt/gqrx_20180715_150114_137100000.wav"

y,Fs,nbits,opt = load(wavname)

#Fs2 = 20800.
Fs2 = 11025.
Fs2 = 11024.
Fs2 = 11024.
#Fs2 = 20800.
#Fs2 = 20800.
responsetype = DSP.Filters.Bandpass(400., 4400.,fs = Fs);
designmethod = DSP.Filters.Butterworth(6)

yf = DSP.filt(DSP.digitalfilter(responsetype, designmethod), y[:,1]);

#plot(y[range(1,length= 500),2])
#clf();plot(y[range(1,length= 500),2])
#plot(yf[range(1,length= 500)])

y2 = DSP.Filters.resample(yf, Float64(Fs2) / Float64(Fs) ); size(yf,1), size(y2,1)

#clf();plot(y2[range(1,length= 500)])
y_demod = am_demodulation(y2);

#clf();plot(y_demod[range(1,length= 500)])
#clf();plot(y_demod[range(100,length= 500)])
#clf();plot(y_demod[range(100,length= 5000)])
# NOAA_SYNCA = [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

syncA = vcat(repeat([0, 128, 255, 128],7),zeros(7)) .- 128
syncA = NOAA_SYNCA


function find_sync(y_demod,syncA)
    mindistance = 5000

    signalshifted = y_demod .- mean(y_demod);

    peaks = [(1, 0.)]
    corr_ = Float64[]
    for i in 1:(length(signalshifted)-length(syncA)-1)
        corr = syncA' * signalshifted[i : i+length(syncA)-1]
        push!(corr_,corr)

        if (i - peaks[end][1]) > mindistance
            push!(peaks,(i, corr))
        elseif corr > peaks[end][2]
            peaks[end] = (i, corr)
        end
    end

    pp = [p[1] for p in peaks];
    return pp
end
#y_demod = y_demod[4000:end]
#=
=#
len_line = 2080
len_line = round(Int,0.5 * Fs2)
len_line = 5512
len_line = 5522
inter = 5512
inter = round(Int,0.5 * Fs2)

pp = [p[1] for p in peaks];

pp = 4987 .+ (0 : length(y_demod) ÷ inter - 2 ) * inter
pp = 1 .+ (0 : length(y_demod) ÷ inter - 2 ) * inter
#pp = 1 .+ (0 : length(y_demod) ÷ inter - 2 ) * inter
pp = 7338 .+ (0 : length(y_demod) ÷ inter - 2 ) * inter


pp = [0, 14190, 19502, 27030, 32425, 42393, 47855, 54804, 66839, 73336, 79239, 96281, 101807, 113133, 122330, 132051, 144223, 156857, 165445, 171521, 177228, 184238, 200124, 214242, 219355, 228130, 242283, 251574, 267746, 281054, 292102, 303420, 312610, 319912, 328128, 334538, 344044, 353832, 369250, 385930, 391984, 398424, 404495, 411133, 418470, 426002, 433516, 440412, 448811, 459833, 472090, 479765, 485732, 490863, 500452, 507320, 514642, 521710, 531420, 550121, 566042, 580435, 588699, 598438, 603677, 614136, 619775, 629692, 634876, 645946, 661436, 670986, 678129, 688374, 695119, 706699, 721901, 733451, 740463, 750079, 755601, 765088, 777269, 783846, 793908, 803654, 809551, 817773, 827958, 833030, 838064, 848507, 863135, 869125, 878695, 884275, 890839, 897202, 905088, 912355, 919368, 928183, 938978, 950713, 960942, 965980, 980462, 987261, 992408, 1011510, 1024622, 1029661, 1037438, 1047827, 1056523, 1068296, 1077709, 1083601, 1089784, 1100854, 1110290, 1122492, 1127601, 1138666, 1146148, 1151919, 1158012, 1178107, 1184007, 1190613, 1199979, 1205485, 1216333, 1223221, 1241700, 1254854, 1264876, 1279070, 1294619, 1304827, 1311389, 1319368, 1333171, 1340403, 1352225, 1359254, 1368925, 1379857, 1386965, 1397360, 1406732, 1413799, 1429269, 1437448, 1447038, 1455161, 1461745, 1475798, 1483961, 1494446, 1500679, 1506426, 1512923, 1522878, 1527906, 1535268, 1540466, 1546677, 1556815, 1565792, 1571681, 1577827, 1583728, 1591111, 1596497, 1606070, 1612027, 1618591, 1625757, 1633364, 1644776, 1649889, 1659517, 1670327, 1678414, 1687649, 1703053, 1711542, 1726474, 1734589, 1747075, 1756742, 1766462, 1775385, 1780671, 1786940, 1798658, 1803809, 1816539, 1822772, 1828230, 1838592, 1847070, 1860130, 1868506, 1877362, 1882490, 1892994, 1901707, 1909689, 1918394, 1926908, 1933539, 1940104, 1950872, 1957471, 1966303, 1976135, 1985034, 1995824, 2003742, 2009971, 2016222, 2022462, 2028703, 2034942, 2041170, 2047446, 2053661, 2059902, 2066165, 2072382, 2078622, 2084862, 2091100, 2097341, 2103581, 2109820, 2116060, 2122312, 2128540, 2134780, 2141020, 2147260, 2153512, 2159740, 2165979, 2172219, 2178459, 2184699, 2190939, 2197179, 2203419, 2209659, 2215898, 2222138, 2228378, 2234618, 2240858, 2247098, 2253338, 2259578, 2265817, 2272057, 2278297, 2284537, 2290777, 2297017, 2303257, 2309497, 2315737, 2321977, 2328216, 2334456, 2340696, 2346936, 2353176, 2359416, 2365656, 2371895, 2378135, 2384375, 2390615, 2396855, 2403095, 2409335, 2415575, 2421814, 2428054, 2434294, 2440534, 2446774, 2453014, 2459254, 2465494, 2471734, 2477973, 2484213, 2490453, 2496693, 2502933, 2509173, 2515413, 2521653, 2527892, 2534132, 2540372, 2546612, 2552852, 2559092, 2565332, 2571572, 2577811, 2584051, 2590291, 2596531, 2602771, 2609011, 2615251, 2621491, 2627731, 2633970, 2640210, 2646450, 2652690, 2658930, 2665170, 2671410, 2677650, 2683890, 2690129, 2696369, 2702609, 2708849, 2715089, 2721329, 2727569, 2733809, 2740048, 2746288, 2752528, 2758768, 2765008, 2771248, 2777488, 2783728, 2789968, 2796207, 2802447, 2808687, 2814927, 2821167, 2827407, 2833647, 2839887, 2846127, 2852366, 2858606, 2864846, 2871086, 2877326, 2883566, 2889806, 2896046, 2902286, 2908525, 2914765, 2921005, 2927245, 2933485, 2939725, 2945965, 2952205, 2958445, 2964684, 2970924, 2977164, 2983404, 2989644, 2995884, 3002124, 3008364, 3014604, 3020843, 3027083, 3033323, 3039563, 3045803, 3052043, 3058283, 3064523, 3070763, 3077003, 3083242, 3089482, 3095722, 3101962, 3108202, 3114442, 3120682, 3126922, 3133162, 3139401, 3145641, 3151881, 3158121, 3164361, 3170601, 3176841, 3183081, 3189321, 3195560, 3201800, 3208040, 3214280, 3220520, 3226760, 3233000, 3239240, 3245480, 3251720, 3257959, 3264199, 3270439, 3276679, 3282919, 3289159, 3295399, 3301639, 3307879, 3314119, 3320358, 3326598, 3332838, 3339078, 3345318, 3351558, 3357798, 3364038, 3370278, 3376518, 3382757, 3388997, 3395237, 3401477, 3407717, 3413957, 3420197, 3426437, 3432677, 3438917, 3445157, 3451396, 3457636, 3463876, 3470116, 3476356, 3482596, 3488836, 3495076, 3501316, 3507556, 3513796, 3520035, 3526275, 3532515, 3538755, 3544995, 3551235, 3557475, 3563715, 3569955, 3576195, 3582434, 3588674, 3594914, 3601154, 3607394, 3613634, 3619874, 3626114, 3632354, 3638594, 3644834, 3651074, 3657313, 3663553, 3669793, 3676033, 3682273, 3688513, 3694753, 3700993, 3707233, 3713473, 3719712, 3725953, 3732192, 3738432, 3744672, 3750912, 3757152, 3763392, 3769632, 3775872, 3782112, 3788352, 3794592, 3800832, 3807072, 3813311, 3819551, 3825791, 3832031, 3838271, 3844511, 3850751, 3856991, 3863231, 3869471, 3875711, 3881951, 3888190, 3894430, 3900670, 3906910, 3913150, 3919390, 3925630, 3931870, 3938110, 3944350, 3950590, 3956830, 3963069, 3969309, 3975549, 3981789, 3988030, 3994269, 4000509, 4006749, 4012989, 4019229, 4025469, 4031709, 4037949, 4044189, 4050429, 4056669, 4062909, 4069148, 4075388, 4081629, 4094108, 4100360, 4109789, 4121223, 4126506, 4131548, 4137789, 4144040, 4150267, 4156508, 4162759, 4175227, 4181491, 4187695, 4193947, 4200187, 4206427, 4212667, 4218907, 4225147, 4231387, 4237627, 4243866, 4250106, 4256347, 4262587, 4268839, 4275067, 4281306, 4287547, 4293786, 4300027, 4306279, 4312506, 4318746, 4324986, 4331226, 4337466, 4343706, 4349946, 4356186, 4362426, 4368666, 4374906, 4381146, 4387386, 4393626, 4399866, 4406106, 4412346, 4418586, 4424826, 4431066, 4437306, 4443546, 4449786, 4456025, 4462265, 4468505, 4474745, 4480985, 4487225, 4493465, 4499705, 4505945, 4512185, 4518425, 4524665, 4530905, 4537145, 4543385, 4549625, 4555865, 4562105, 4568345, 4574585, 4581410, 4587077, 4593257, 4599545, 4605797, 4612025, 4618265, 4624505, 4630745, 4636985, 4643225, 4649465, 4655705, 4661945, 4668185, 4674425, 4680665, 4686905, 4693145, 4699385, 4705636, 4714258, 4720710, 4730585, 4736861, 4743065, 4749305, 4755545, 4761785, 4768025, 4774265, 4780505, 4786745, 4792985, 4799225, 4805465, 4811705, 4817945, 4824184, 4830425, 4836665, 4842917, 4852612, 4867876, 4874105, 4880345, 4886585, 4892825, 4899065, 4905305, 4911545, 4917785] .+ 1
matrix = zeros(length(pp),inter)

for i = 1:length(pp)-1
#   matrix[i,:] = signalshifted[pp[i] - length(syncA) : pp[i] + len_line - 1]
#   matrix[i,:] = signalshifted[pp[i] : pp[i] + len_line - 1]
   matrix[i,:] = signalshifted[pp[i] : pp[i]+inter+1][1:inter]
#   matrix[i,:] = signalshifted[pp[i] : pp[i+1]-1]
end


#=
figure();plot(y_demod,ls="-",marker=".",lw=0.5,ms=1)
peaks
size(matrix)
=#

#nl = length(peaks) ÷ 2
#mm = reshape(matrix[1:nl*2,:],nl,2,size(matrix,2));
#=
clf();pcolormesh(mm[:,1,:]')
=#
